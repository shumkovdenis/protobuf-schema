// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/v1/example.proto

package examplev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/shumkovdenis/protobuf-schema/gen/example/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ExampleServiceName is the fully-qualified name of the ExampleService service.
	ExampleServiceName = "example.v1.ExampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExampleServiceCallProcedure is the fully-qualified name of the ExampleService's Call RPC.
	ExampleServiceCallProcedure = "/example.v1.ExampleService/Call"
)

// ExampleServiceClient is a client for the example.v1.ExampleService service.
type ExampleServiceClient interface {
	Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error)
}

// NewExampleServiceClient constructs a client for the example.v1.ExampleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ExampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleServiceClient{
		call: connect_go.NewClient[v1.CallRequest, v1.CallResponse](
			httpClient,
			baseURL+ExampleServiceCallProcedure,
			opts...,
		),
	}
}

// exampleServiceClient implements ExampleServiceClient.
type exampleServiceClient struct {
	call *connect_go.Client[v1.CallRequest, v1.CallResponse]
}

// Call calls example.v1.ExampleService.Call.
func (c *exampleServiceClient) Call(ctx context.Context, req *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error) {
	return c.call.CallUnary(ctx, req)
}

// ExampleServiceHandler is an implementation of the example.v1.ExampleService service.
type ExampleServiceHandler interface {
	Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error)
}

// NewExampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleServiceHandler(svc ExampleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ExampleServiceCallProcedure, connect_go.NewUnaryHandler(
		ExampleServiceCallProcedure,
		svc.Call,
		opts...,
	))
	return "/example.v1.ExampleService/", mux
}

// UnimplementedExampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleServiceHandler struct{}

func (UnimplementedExampleServiceHandler) Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.ExampleService.Call is not implemented"))
}
