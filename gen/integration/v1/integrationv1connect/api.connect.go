// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: integration/v1/api.proto

package integrationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/shumkovdenis/protobuf-schema/gen/integration/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IntegrationServiceName is the fully-qualified name of the IntegrationService service.
	IntegrationServiceName = "integration.v1.IntegrationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationServiceGetBalanceProcedure is the fully-qualified name of the IntegrationService's
	// GetBalance RPC.
	IntegrationServiceGetBalanceProcedure = "/integration.v1.IntegrationService/GetBalance"
)

// IntegrationServiceClient is a client for the integration.v1.IntegrationService service.
type IntegrationServiceClient interface {
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
}

// NewIntegrationServiceClient constructs a client for the integration.v1.IntegrationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IntegrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationServiceClient{
		getBalance: connect_go.NewClient[v1.GetBalanceRequest, v1.GetBalanceResponse](
			httpClient,
			baseURL+IntegrationServiceGetBalanceProcedure,
			opts...,
		),
	}
}

// integrationServiceClient implements IntegrationServiceClient.
type integrationServiceClient struct {
	getBalance *connect_go.Client[v1.GetBalanceRequest, v1.GetBalanceResponse]
}

// GetBalance calls integration.v1.IntegrationService.GetBalance.
func (c *integrationServiceClient) GetBalance(ctx context.Context, req *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// IntegrationServiceHandler is an implementation of the integration.v1.IntegrationService service.
type IntegrationServiceHandler interface {
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
}

// NewIntegrationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationServiceHandler(svc IntegrationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(IntegrationServiceGetBalanceProcedure, connect_go.NewUnaryHandler(
		IntegrationServiceGetBalanceProcedure,
		svc.GetBalance,
		opts...,
	))
	return "/integration.v1.IntegrationService/", mux
}

// UnimplementedIntegrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationServiceHandler struct{}

func (UnimplementedIntegrationServiceHandler) GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("integration.v1.IntegrationService.GetBalance is not implemented"))
}
