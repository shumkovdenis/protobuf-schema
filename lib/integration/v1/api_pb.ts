// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file integration/v1/api.proto (package integration.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message integration.v1.GetBalanceRequest
 */
export class GetBalanceRequest extends Message<GetBalanceRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  /**
   * @generated from field: string operator_id = 2;
   */
  operatorId = "";

  /**
   * @generated from field: string player_id = 3;
   */
  playerId = "";

  /**
   * @generated from field: string game_id = 4;
   */
  gameId = "";

  constructor(data?: PartialMessage<GetBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.GetBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBalanceRequest {
    return new GetBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBalanceRequest {
    return new GetBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBalanceRequest {
    return new GetBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBalanceRequest | PlainMessage<GetBalanceRequest> | undefined, b: GetBalanceRequest | PlainMessage<GetBalanceRequest> | undefined): boolean {
    return proto3.util.equals(GetBalanceRequest, a, b);
  }
}

/**
 * @generated from message integration.v1.GetBalanceResponse
 */
export class GetBalanceResponse extends Message<GetBalanceResponse> {
  /**
   * @generated from field: int64 balance = 1;
   */
  balance = protoInt64.zero;

  constructor(data?: PartialMessage<GetBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.GetBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBalanceResponse {
    return new GetBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBalanceResponse {
    return new GetBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBalanceResponse {
    return new GetBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBalanceResponse | PlainMessage<GetBalanceResponse> | undefined, b: GetBalanceResponse | PlainMessage<GetBalanceResponse> | undefined): boolean {
    return proto3.util.equals(GetBalanceResponse, a, b);
  }
}

